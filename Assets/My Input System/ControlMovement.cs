//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/My Input System/ControlMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlMovement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlMovement"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""bd9e470a-c252-4101-adf9-b58753938454"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9bd0bede-cfd4-4a49-aa4e-aa01bed3a943"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fall"",
                    ""type"": ""Button"",
                    ""id"": ""b2aa24b7-390a-47b5-bdc9-59cb055a0a4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Moving"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6864b3d-a4f6-4578-a791-d19a639fdb61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1afb3aaf-5de5-4fa1-bc99-d4d97d5a3e3f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb10a35e-57bf-482c-bfce-28dcaad13016"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""2993ee16-be6d-4aa5-ba01-164687989911"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4faa11ee-adf8-4048-a604-331b596e8472"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b6b4a999-34f3-4ce4-8518-73af591b2b40"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Tank"",
            ""id"": ""96217f68-18a6-4f0f-a7ca-6e36b0dadd43"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7d5fc086-7ee2-4591-9d33-433494ed2996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Moving"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0f81b122-5504-44b0-a3bf-76a4495ba11f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58344490-fb24-41ff-b48d-ee0ea7c39a4e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc01554b-c488-415d-9bdd-c4e8f656d7d6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""b9a6b2bb-47da-4c55-927e-cb7730071466"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7e8708c8-d1b8-43ed-9667-433a6a761770"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6ef68af2-747e-45c3-bb72-87e5961cf207"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Jump = m_Car.FindAction("Jump", throwIfNotFound: true);
        m_Car_Fall = m_Car.FindAction("Fall", throwIfNotFound: true);
        m_Car_Moving = m_Car.FindAction("Moving", throwIfNotFound: true);
        // Tank
        m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
        m_Tank_Shoot = m_Tank.FindAction("Shoot", throwIfNotFound: true);
        m_Tank_Moving = m_Tank.FindAction("Moving", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_Car_Jump;
    private readonly InputAction m_Car_Fall;
    private readonly InputAction m_Car_Moving;
    public struct CarActions
    {
        private @ControlMovement m_Wrapper;
        public CarActions(@ControlMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Car_Jump;
        public InputAction @Fall => m_Wrapper.m_Car_Fall;
        public InputAction @Moving => m_Wrapper.m_Car_Moving;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_CarActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnJump;
                @Fall.started -= m_Wrapper.m_CarActionsCallbackInterface.OnFall;
                @Fall.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnFall;
                @Fall.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnFall;
                @Moving.started -= m_Wrapper.m_CarActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnMoving;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Fall.started += instance.OnFall;
                @Fall.performed += instance.OnFall;
                @Fall.canceled += instance.OnFall;
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
            }
        }
    }
    public CarActions @Car => new CarActions(this);

    // Tank
    private readonly InputActionMap m_Tank;
    private ITankActions m_TankActionsCallbackInterface;
    private readonly InputAction m_Tank_Shoot;
    private readonly InputAction m_Tank_Moving;
    public struct TankActions
    {
        private @ControlMovement m_Wrapper;
        public TankActions(@ControlMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Tank_Shoot;
        public InputAction @Moving => m_Wrapper.m_Tank_Moving;
        public InputActionMap Get() { return m_Wrapper.m_Tank; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
        public void SetCallbacks(ITankActions instance)
        {
            if (m_Wrapper.m_TankActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @Moving.started -= m_Wrapper.m_TankActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnMoving;
            }
            m_Wrapper.m_TankActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
            }
        }
    }
    public TankActions @Tank => new TankActions(this);
    public interface ICarActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnFall(InputAction.CallbackContext context);
        void OnMoving(InputAction.CallbackContext context);
    }
    public interface ITankActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMoving(InputAction.CallbackContext context);
    }
}
